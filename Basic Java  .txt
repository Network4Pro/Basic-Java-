Basic Java : 
------------


1) Commentaire . 
----------------

1.1) Commentaires sur une seule ligne
* Les commentaires sur une seule ligne commencent par deux barres obliques ( //).
* Ex : // Text 

1.2) Commentaires Java multilignes
* Les commentaires sur plusieurs lignes commencent /*et se terminent par */.
* Ex : /*    Text   */


=====================================================================================================


2) Variables : 
--------------
* Les variables sont des conteneurs permettant de stocker des valeurs de données.
* Vous devez initialiser une variable avant de l'utiliser. 

2.1) Déclaration d'une variable
* Data_Type Var_Name = valeur;

2.2) Initialisation d'une variable
* Type Name = Value;
* Name = Value;

Nom => Identificateur


2.3) Pour Afficher ou print Variable :
--------------------------------------
* Pour combiner à la fois du texte et une variable, utilisez le +caractère
* System.out.println("text " + variable );
*  utiliser le +caractère pour ajouter une variable à une autre variable 



2.4) Déclarez de nombreuses variables
-------------------------------------
* variables du même type , utiliser une liste séparée par des virgules.
Type name = val , type = name , type = name ;
* Une valeur pour plusieurs variables.
Type name , name , name ;
x = y = z = valeur;


2.4.1) Constante Variable :
---------------------------
* En Java, pour déclarer une constante, on utilise généralement le mot-clé final. 
* Une constante est une variable dont la valeur ne peut pas être modifiée une fois qu'elle a été définie.
* Il est également courant d'utiliser des majuscules pour le nom de la constante afin de la distinguer des variables.
Example : final String MA_VARIABLE = 'YOUSSEF';


2.5) Identifiants :
-------------------
* Toutes les variables Java doivent être identifiées par des noms uniques .
* Ces noms uniques sont appelés identifiants .

Les règles générales pour nommer les variables sont :

Les noms peuvent contenir [A-Z], [a-z], [0-9], [_] et [&].
Les noms doivent commencer par [A-Z], [a-z]
Les noms doivent commencer par une lettre minuscule et ne peuvent pas contenir d'espaces.
Les noms peuvent aussi commencer par $ et _ (mais nous ne l'utiliserons pas dans ce tutoriel)
Les noms sont sensibles à la casse ("myVar" et "myvar" sont des variables différentes)
Les mots réservés (comme les mots-clés Java, tels que intou boolean) ne peuvent pas être utilisés comme noms


=====================================================================================================


3) Types de données Java : 
--------------------------

En java, Il y a deux types de variables :
* Type Simple ou primitif.
* Type Complexe ou des objets.


3.1) Type de données primitifs 
-------------------------------
Byte    : 1 bytes
Short   : 2 bytes
Int     : 4 bytes
Long    : 8 bytes
Float   : 4 bytes
Double  : 8 bytes 
Boolean : 1 bytes
Char    : 2 bytes

Les valeur par default pour les champs de class : 
-------------------------------------------------
* Les champs déclarés mais non initialisés seront définis par défaut par le compilateur.
* Les champs sont des variables qui sont déclarées dans le corps d'une classe. 

byte    : 0
short   : 0
int     : 0
long    : 0L
float   : 0.0f
double  : 0.0d
boolean : Faux
char    : '\u0000'
string  : null

NB : 
* Mais les variables local quand déclarer sans initialisé compilateur lance error de Compilation, la variable n'est pas initialisée.
* Les variables locales doivent être explicitement initialisées avant utilisation.



3.1.1) Nombre : 
---------------

1)  Les Types Entiers :
------------------------- 
Définition : Les types entiers en Java permettent de stocker des nombres entiers, qu'ils soient positifs ou négatifs, avec différentes tailles de mémoire.

- byte  (1) : Plage de valeurs de  -2^8 à -2^8-1
- short (2) : Plage de valeurs de  --2^16 à -2^16-1
- int   (4) : Plage de valeurs de  -2^32 à -2^32-1
- long  (8) : Plage de valeurs de -2^63 à -2^63-1 (terminez la valeur par "L" ou "l").

* Base Binaire : 
-------------------------
Définition : La représentation binaire des nombres en Java peut être réalisée avec le préfixe 0b ou 0B, suivi de la séquence binaire.
- Syntaxe : 0bxxxx;
- int num = 0b1011;

* Base Octale :
------------------------
Définition : Les nombres octaux sont précédés du préfixe 0, suivis de la séquence octale.
- Syntaxe : 075

* Base Hexadécimale : 
-------------------------------
Définition : Les nombres hexadécimaux sont précédés du préfixe 0x ou 0X, suivis de la séquence hexadécimale.
- Syntaxe : 0X425f

NB : Les entiers sont signés par défaut, cela signifie qu'ils comportent un signe. Pour stocker l'information concernant le signe (en binaire), les ordinateurs utilisent le complément à deux



2) Les types à virgule flottante : 
------------------------------------
Définition : Les types à virgule flottante en Java permettent de représenter des nombres avec une partie fractionnaire.

* Float  : Précision de  6 chiffres après la virgule , terminez la valeur par "f".
* Double : Précision de 6 chiffres après la virgule , terminez la valeur par "d".

Numéros scientifiques : 
-----------------------
Définition : Les numéros scientifiques peuvent être représentés en utilisant la notation scientifique avec "e" ou "E" pour indiquer la puissance de 10.

- Float f1 = 35e3f;
- Double d1 = 12E4d;



* Les Class Double et Float et Integer : 
----------------------------------------

* Class Double (double)   :  NAN . Max_Value . MIN_Value . POSITIVE_INFINITY . NEGATIVE_INFINITY . SIZE . PRECISION 
* Class Float  (float)    :  POSITIVE_INFINITY . NEGATIVE_INFINITY . NaN . MAX_VALUE . MIN_VALUE . SIZE . PRECISION
* Class Integer (int)     :  MIN_VALUE . MAX_VALUE  . toBinaryString()
* Class Short (short)     : 
* Class Boolean (boolean) :
* Class Byte (byte)	  :
* Class Character (char)  :
* 
 

3.1.2) Boolean : 
----------------

- bool : 1 byte 
- peut prendre deux valeur : true ou false 


3.1.3) characters :
-------------------

Définition :  Le type de données char en Java est dédié au stockage d'un caractère unique. 

- Le characters doit être entouré de guillemets simples '' , comme « A » ou 'c'
- Example : 'A' pour afficher caractere A 
-  si vous êtes familier avec les valeurs ASCII : 66 , 67
- ASCII : [0-9] = 48-57  et   [A-Z] = 65-90    et    [a-z] = 97-122
- Vous pouvez utiliser n'importe quel carcatère Unicode sous la forme d'un caractère littéral : char x = '\u05Do';

- Séquences d'échapement spéciales pour littéraux char :
\b    => retour arriére 
\t    => tabulation
\n    => saut de ligne
\f    => saut de page
\r    => retour chariot
\"    => guillement doubles
\'    => guillement simple
\\    => barre oblique inverse


Differenet Entre Code Ascii et Unicode : 
----------------------------------------
ASCII 
------
Apparition : 1963
Taille : 7 bits
Capacité : Code 128 caractères
Langue : Principalement anglais et français
Notation : Décimal (xx) ou Hexadécimal (\uxxx)

ASCII Étendu 
------------
Apparition : 1980
Taille : 8 bits
Capacité : Code 256 caractères

Unicode
-------
Apparition : 1991
Taille : 16 bits
Compatibilité : Ascendante avec ASCII
Capacité : Représente toutes les langues
Notation : Hexadécimal (\uxxx)



3.1.4) String : 
---------------
- Les valeurs de chaîne doivent être entourées de guillemets : "Text"
- Example : "Je suis Youssef El Khanchoufi"
- Type de données non primitif, car elle fait référence à un objet.


3.2) Type de donées complexe
----------------------------
* String 
* Tableaux
* classe
* interface


3.3) Java Casting de type
-------------------------
La conversion de type consiste à attribuer une valeur d’un type de données primitif à un autre type.



3.3.1) Conversion ( Type Conversion ou Type Casting impilicite ) :
------------------------------------------------------------------
* Une Conversion élargisante : 
------------------------------

- La conversion implicite automatiquement si le type de données de destination est plus large que le type source. 
- byte => short => char => int => long => float => double 



3.3.2) Casting ( Type Casting Explicite ) : 
-------------------------------------------
* Une Conversion restrictive :
------------------------------
Transtypage (cast) :

- Convertir un type de données en un autre, mais de manière explicite.
- Vous utlisez (Type) pour effectuer un casting.


==========================================================================================================


4) Operateurs
--------------

Differenet entre expression et condition :
------------------------------------------
- Expression : Combinaison de variables, opérateur et valeurs qui produit un résultat.
- Expressions logiques => Condition : Expression qui évalue à un résultat de type booléen (true - false)

Opérandes (opérateur) opérandes = Expression 
Peut utiliser le parenthèses pour controler la priorité d'évaluation de vos opérateur.


4.1) Opérateurs arithmétiques 
------------------------------

* Les expression arithmétiques : Effectuer des opérations mathématiques sur des variables et des valeurs. est le résulta une valeur.
* Vous pouvez utiliser des parenthèses pour définir d'évaluation des opérations.
* Les expressions logiques renvoient des valeurs booléennes (true ou false).

4.1.1) Opérateur + :
--------------------
* Additionne deux nombres  =>  ( 10 + 5 = 15 )
* Concaténer des chaines de caractères  =>  ( "Youssef" + "El khanchoufi"  = "Youssef El khanchoufi")
* Si l'un des deux opérandes de + est une chaine caractères, l'autre est alors converti en chaine de caractères. => ("Youssef " + 5 + 2 )  => "Youssef 52"
* Il faut utiliser des parenthèses lorsqu’on combine l'addition la concaténation:
=> System.out.println("Total: " + 3 + 4); // Affiche "Total: 34", et non pas 7!


4.1.2) Opérateur - :
--------------------
* Opérateur binaire : Soustrait le second opérande du premier. (7-3 = 4)
* Opérateur monadique devant un seul opéande => Convertit une valeur positive en une valeur négative et vice versa. [-(5) = -5 ]  :  [ -(-5) = 5 ]

* Opérateur unary :
-------------------
* (+) : représente valeur positive : (+5)
* (-) : représente valeur négative : (-5)



4.1.3) Opérateur / :
--------------------
* Diviser le premier opérande par le second.
* Si les deux opérandes sont des entiers => le résultat est un nombre entier 
* Si l'un des deux opérandes est une valeur à virgule flottant, les resultat est un valeur à virgule flottante.
* Lors de la division de deux entiers, une division par zéro léve une exception "ArithmeticException".
- 7/0     => ArithmeticException
- 7/0.0   => Retourne l'infini positif 
- 0.0/0.0 => Retourne NAN


4.1.4) Opérateur % :
--------------------
* Calcule le premier opérande modulo le second opérande 
* le signe du résutat est le meme que le signe du premier opérande
* Avec des valeurs entières, le calcule d'une valeur modulo zéro provoque une exception ArithmeticException
* Avec des valeur à virgule flottante, une valeur quelconque modulo 0.0 retourne NAN


4.2) Opérateurs d'affectation
 ----------------------------
4.2.1) Opérateur arithmétiques avec affectation
-----------------------------------------------
m = n    =>   m = n
m += n   =>   m = m + n  : Addition deux valeurs et stocke le résultat dans la variable (à gauche)
m -= n   =>   m = m - n  : Soustrait deux valeurs et stocke le résultat dans la variable
m *= n   =>   m = m * n  : Multiplie deux valeurs et stocke le résultat dans la variable
m /= n   =>   m = m / n  : Divise deux valeurs et stocke le résultat dans la variable
m %= n   =>   m = m % n  : 


4.2.2) (Les opérateurs de rotation de bit) :
--------------------------------------------
>>=   : l'opérateur permet de décaler les bits vers la droite. ex : 5 (101) >> 3 = (0)      => 0
<<=   : L'Opérateur permet de décaler les bits vers la gauche. ex : 5 (101) << 3 = (101000) => 40



Opérateur orientés bit avec affectation  : 
------------------------------------------

(ET bit-à-bit)  => m &= n   => m = m & n : Retourne 1 si les deux bits de même poids sont à 1
(OU Inclusif)   => m |= n   => m = m | n : Retourne 1 si l'un ou l'autre des deux bits de même poids est à 1 (ou les deux) 
(OU exclusif)   => m ^= n   => m = m ^ n : Retourne 1 si l'un des deux bits de même poids est à 1 (mais pas les deux)



4.3) Opérateur d'incrémentation et de décrémentation 
----------------------------------------------------

4.3.1) Définition
-----------------
*- Opérateur d'incrémentation (++)  : Ajoute 1 à la valeur de la variable.
*- Opérateur de décrementation (--) : Soustrait 1 à la valeur de la variable.


4.3.2) Utilisation dans des expression : 
----------------------------------------

NB :incrémente ou décrémentée  la valeur de la variable avant qu'elle ne soit utilisée dans une expression. 
* m++ => un opérateur de pré incrémentation (placé à gauche). => (préfixe)
* m-- => un opérateur de pré décrémentation (placé à gauche). => (préfixe)


NB : incrémente ou décrémentée  la valeur de la variable après qu'elle a été utilisée dans une expression. 
* ++m => un opérateur de post incrémentation (placé à droite). => (postfixe)
* --m => un opérateur de post décrémentation (placé à droite). => (postfixe)

* Opérateur de post-incrémentation => Utilisation Dans une instruction "System.out.println()" => La valeur actuelle de "x"
sera incrémentée de 2 après l'évaluatiion de l'expression.

Example :
----------
num = 10;
* A = num++;   (A = num) => ( num + 1 ) => A=10 : num=11
* A = ++num;   (num +1 ) => ( A = num ) => num=11 : A=11
* B = num--;   (B = num) => ( num + 1 ) => B=10 : num=9
* B = --num;   ( num +1) => (B = num )  => B=9  : num=9

NB: 
* Les opérateur ne peuvent étre utilisés qu'avec des variables.
* Vous ne pouvez pas les utiliser avec des valeurs littérales ou des constantes.



4.3) Opérateurs de comparaison :
-------------------------------
Définition : 
-------------
- les opérateur de comparaison sont utilisés pour comparer deux valeurs ( ou variables).
- Syntaxe : [ Valeur ou variable ( Opérateur de Comparaison ) Valeur ou Variable ]
- La valeur de retour d'une comparaison est soit ( true - false )

* a == b  ( égal à )      : true si a egal b sinon false
* a != b  (différent de ) : true si a n'est pas égal b, sinon false
* a < b (inférieur à)     : true si a est strictement inférieur à b, sinon false.
* a > b  (supérieur à)    : true si a est strictement supérieur à b, sinon false.
* a <= b (inférieur ou égal à) : true si a est inférieur ou égal à b, sinon false.
* a >= b (supérieur ou égal à) : true si a est supérieur ou égal à b, sinon false.



4.4) Opérateurs logiques :
--------------------------
Définition :
------------

* Permet de combinaison d'expressions (Condition) différentes
Syntaxe : Condition ( Opérateur Logique) Condition 
* Condition est expression qui évalue à un resultat de type booléen

4.4.1) L'opération && : 
-----------------------

- Effectuer une opération "et" logique entre deux expressions.
- Si la première expression est fausse, la seconde expression n'est pas évaluée en raison du court-circuit. 

Example :
-----------
true  : true && true 
false : false && false . false && true . true && false . 

4.4.2) L'opération ||  :
------------------------

- Effectuer une opération "OU" logique entre deux expressions.
- Si la première expression est vraie, la seconde expression n'est pas évaluée en raison du court-circuit.

Example :
----------
true  : true || true . true || false . false || true   
false : false || false 

4.4.3 ) L'opérateur '!'  : 
--------------------------

- Effectue une opération de négation logique, inversant le résultat d'une expréssion booléenne.

Example : 
----------
true : false
false : true 


4.5) Opérateur Bit à Bit (& et | )
-----------------------------------

4.5.1 ) Opérateur & :
--------------------- 

  * Cet opérateur est utilisé pour effectuer une opération AND bit à bit sur des entiers.
  * Il compare chaque bit correspondant des deux opérandes et renvoie un résultat où chaque bit du résultat est le résultat de l'opération And sur les bits correspondants.



4.5.2) Opérateur | :
--------------------
 
  * Cet opérateur est utilisé pour effectuer une opération OR bit à bit sur des entiers.
  * Il compare chaque bit correspondant des deux opérandes et renvoie un résultat où chaque bit du résultat est le résultat de l'opération OR sur les bits correspondants.

* Ils fonctionnent comme les opérateurs Logiques '&&' et '||', mais sans Court-circuitage
- Condition1 & Condition2 = true 0001 & false 0000 = 0000 false
- Condition1 | Condition2 = true 0001 | false 0000 = 0001 true 
* évaluent toujours les deux cotes de l'expression. pas le cout-circuitage


4.5.3 ) Opérateur Conditionnel : 
--------------------------------
* L'opérateur conditionnel, souvent appelé l'opérateur ternaire.
* Utiliser pour affecter une valeur à une variable en fonction d'une fonction d'une Condition.

Syntaxe : 
---------
Condition ? expression_si_vraie : expression_si_fausse;

Example : ( x >= 10 ? a : b ) ;


===========================================================================================================



5) INSTRUCTIONS DE BRANCHEMENT CONDITIONNEL :
---------------------------------------------

Nb : Quand l'instruction contient une seul instruction ne pas nécessaire utiliser les Accolades.

5.1) Instruction if :
---------------------

if(Condition) { // block of code to be executed if the condition is true  }

NB : les lettres majuscules (If ou IF ) généreront une erreur.

5.2) Instruction else :
-----------------------

if(condition) { // executer Code if the condition is true } 
else { if condition is false}

5.3) Instruction else if :
--------------------------

if( cond1 ) { // executer Code is true   }
else if (cond2) { executer code if cond1 is false }
else { executer code if cond2 is false}


===============================================================================================================


6) Instruction Switch :
-----------------------
Définition : La structure switch en Java est utilisée pour exécuter différents blocs de code en fonction de la valeur d'une expression. 

Switch(expression){
  case x:  // code block   break;
  case y:  // code block   break;
  case z:  // code block   break;
  default: // code block
}

1* Si plusieurs cas doivent entraîner la même action, ils peuvent être combinés en utilisant le format : case x: case y: // bloc de code break;

2* La structure switch fonctionne avec des types tels que byte, short, char, int, ainsi qu'avec des types Enum, String, Character, Byte, Short, et Integer.

3* Lorsque Java atteint un mot-clé break, elle quitte le bloc switch.

4* Le mot-clé default spécifie du code à exécuter s'il n'y a aucune correspondance de cas.

5* Si l'instruction default est la dernière instruction d'un bloc switch, la pause n'est pas nécessaire.


===========================================================================================================

7) Boucles 
-----------

7.1) Boucle While :
-------------------
* L'instruction while exécute continuellement un bloc d'instructions lorsqu'une condition particulière est true.

While(Condition){
  // code block to be executed 
}


7.2) Boucle do while :
----------------------
* Cette boucle va exécutez le bloc de code une fois, avant de vérifier si la condition est vraie, alors il le fera répétez la boucle tant que la condition est vraie.

do{
   // code block to be executed
}while(condition);


7.3) Boucle for :
-----------------
* Lorsque vous savez exactement combien de fois vous souhaitez parcourir un bloc de code, utilisez la boucle for au lieu d'une boucle while.

Syntaxe :
---------

for (statement 1; statement 2; statement 3) {
  // code block to be executed
}

* L'L'instruction 1 est exécutée (une fois) avant l'exécution du bloc de code.
* L'Instruction 2 définit la condition d'exécution du bloc de code.
* L'L'instruction 3 est exécutée (à chaque fois) après l'exécution du bloc de code.


7.4) Boucle foreach : 
---------------------
* boucle est utilisée exclusivement pour parcourir les éléments d'un tableau.

for (type variableName : arrayName) {
  // code block to be executed
}


7.5)  break et Continue : 
-------------------------
7.5.1) Break : 
--------------
* L'instruction break permet de mettre fin à l'exécution conditionnelle d'une boucle, que ce soit une boucle "for", "while", "do while" ou "switch".
* En cas de boucles imbriquées, l'instruction break a pour effet de terminer uniquement la boucle la plus interne qui l'englobe.
* Pour interrompre une boucle imbriquée en Java, on peut utiliser l'instruction break avec une étiquette. 
  Cette étiquette, souvent désignée comme "Boucle", est associée à une condition. 
  Lorsque la condition devient vraie, l'instruction break avec l'étiquette est activée, provoquant la sortie de la boucle associée à cette étiquette. En résumé, pour quitter la boucle, on place une étiquette devant la condition qui, si elle est vraie, déclenche l'instruction break avec l'étiquette.


7.5.2) Continue :
-----------------
* L'instruction continue permet exclusivement de mettre fin au tour de boucle en cours le plus proche et de passer directement au tour suivant, sous condition.
* l'utilisation de l'instruction continue est possible pour passer au tour suivant dans le contexte de boucles imbriquées.
* Lorsqu'on utilise l'instruction continue avec des boucles imbriquées, il est nécessaire d'associer une étiquette à la boucle spécifique où l'on souhaite démarrer un nouveau tour.
  De manière similaire à l'utilisation de l'étiquette avec l'instruction break, l'étiquette pour l'instruction continue doit être positionnée au-dessus de la boucle à laquelle elle est liée.


=========================================================================================================


TP 

==========================================================================================================

 8) Concatenate String : 
-----------------------

* L'opérateur + :
----------------- 
  - Peut être utilisé entre les chaînes pour combinez-les: 
Chaine1 + Chaine2 = Chaine1Chaine2


*  Méthode concat() : 
---------------------
  - Utilisation c'est Méthode pour concaténer deux chaînes.
Chaine1.concat(Chaine2)

* Nombre et Chaine =>   le résultat sera une concaténation de chaînes.

NB: Lorsque concaténer  de types différents  avec des chaînes (String) 
=> Java gère automatiquement la conversion des autres types en chaînes.

* Special Characters :
---------------------

* Caractère d'échappement antislash.
\"  =>  "
\'  =>  '
\\  =>  \
\n  => Retour à La Ligne
\t  => Tabulation
\f  => Saut De Page

============================================================================================

9) Convertir String => Nombre   ou  Nombre => String :
------------------------------------------------------

Nombre => String : 
------------------
int Nb = 10; 
String Chaine1 = String.valueof(int);


String => Nombre :
------------------
String Chaine2 = "18"
Method 1 (valueof)  : int nb1 = Integer.parseInt(Chaine2)
Method 2 (parseInt) : int nb2 = Integer.valueof(chaine2)


Différent entre Method ( parseInt )  et  ( Valueof ) :
------------------------------------------------------

* ParseInt :
------------  
  - Renvoie un type primitif int.
  - Vous pouvez utiliser parseInt lorsque vous avez besoin d'une valeur primitive int.

* ValueOf  :  
------------
  -  Renvoie un objet de type Integer, qui est la version objet de l'int.
  -  Lorsque vous travaillez avec des collections ou dans des situations où un objet est préférable à un type primitif.

* Exceptions : Les deux méthodes peuvent lancer une NumberFormatException si la chaîne n'est pas un nombre valide.

=====================================================================================================================

10)  : Array : 
--------------








=======================================================================================================================


11) Utilisation l'object Scanner : 
----------------------------------
   * La classe Scanner est utilisée pour obtenir entrée de l'utilisateur, et elle se trouve dans le package java.util.
   * Les method de la classe Scanner : 

        - next()        : Lit et renvoie le prochain mot (chaîne de caractères sans espace) de l'entrée.
        - nextBoolean() : Lit une valeur booléenne de l'utilisateur.
        - nextByte()    : Lit une valeur d'octet de l'utilisateur.
        - nextDouble()  : Lit une valeur double de l'utilisateur.
        - nextFloat()   : Lit une valeur flottante de l'utilisateur.
        - nextInt()     : Lit une valeur int de l'utilisateur.
        - nextLine()    : Lit et renvoie la ligne entière (y compris les espaces) de l'entrée.
        - nextLong()    : Lit une valeur longue de l'utilisateur.
        - nextShort()   : Lit une valeur courte de l'utilisateur.
        - close()       : Ferme le scanner et libère les ressources associées.

  * Cet objet peut prendre différents paramètres, mais ici,nous n'en utiliserons qu'un. Celui qui correspond
   justement à l'entrée standard en Java : System.in.
  * Scanner s = new Scanner(Paramettre).
    Paramettre :
      - Scanner pour la console (System.in)   :  Lit à partir de la console standard (clavier). => Scanner scanner = new Scanner(System.in);
      - Scanner pour une chaîne de caractères :  Lire à partir d'une chaîne de caractères.   => String maChaine = "Chaine";
      - Scanner pour un fichier               :  Lire à partir de ce fichier (Fich.txt).   => File monFichier = new File("fichier.txt");
      - Scanner pour une URL                  :  Lire à partir d'une URL.               => URL monURL = new URL("http://www.example.com");


=======================================================================================================================

12) 
